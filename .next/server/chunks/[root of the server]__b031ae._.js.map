{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/zipbr/Desktop/afi/src/app/api/modelo/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport async function GET(req: Request) {\n  try {\n    // üîπ Obtener `idmarca` e `idcategoria` desde los par√°metros de b√∫squeda\n    const { searchParams } = new URL(req.url);\n    const idmarca = searchParams.get(\"idmarca\");\n    const idcategoria = searchParams.get(\"idcategoria\");\n\n    if (!idmarca || !idcategoria) {\n      return NextResponse.json(\n        { error: \"Debe proporcionar un ID de marca y un ID de categor√≠a\" },\n        { status: 400 }\n      );\n    }\n\n    // üîπ Cargar el archivo modelo.json\n    const filePath = path.join(process.cwd(), \"src\", \"data\", \"modelo.json\");\n\n    // üî• Verificar que el archivo existe antes de leerlo\n    if (!fs.existsSync(filePath)) {\n      return NextResponse.json(\n        { error: \"Archivo modelo.json no encontrado\" },\n        { status: 404 }\n      );\n    }\n\n    const jsonData = fs.readFileSync(filePath, \"utf-8\");\n    const modelos = JSON.parse(jsonData);\n\n    // üîπ Filtrar los modelos seg√∫n `idmarca` e `idcategoria`\n    const modelosFiltrados = modelos.filter(\n      (modelo: { idmarca: string; idcategoria: string }) =>\n        modelo.idmarca.toString() === idmarca &&\n        modelo.idcategoria.toString() === idcategoria\n    );\n\n    return NextResponse.json(modelosFiltrados, { status: 200 });\n  } catch (error) {\n    console.error(\"‚ùå Error en la API de modelos:\", error);\n    return NextResponse.json(\n      { error: \"Error interno del servidor\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,GAAY;IACpC,IAAI;QACF,wEAAwE;QACxE,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,UAAU,aAAa,GAAG,CAAC;QACjC,MAAM,cAAc,aAAa,GAAG,CAAC;QAErC,IAAI,CAAC,WAAW,CAAC,aAAa;YAC5B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwD,GACjE;gBAAE,QAAQ;YAAI;QAElB;QAEA,mCAAmC;QACnC,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,QAAQ;QAEzD,qDAAqD;QACrD,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,WAAW;YAC5B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;QAC3C,MAAM,UAAU,KAAK,KAAK,CAAC;QAE3B,yDAAyD;QACzD,MAAM,mBAAmB,QAAQ,MAAM,CACrC,CAAC,SACC,OAAO,OAAO,CAAC,QAAQ,OAAO,WAC9B,OAAO,WAAW,CAAC,QAAQ,OAAO;QAGtC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC,kBAAkB;YAAE,QAAQ;QAAI;IAC3D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}